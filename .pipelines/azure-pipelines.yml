parameters:
- name: IsProd
  type: boolean
  default: false

trigger:
- master

pool:
  vmImage: ubuntu-latest
  demands: npm

variables:
  IsMaster: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  IsProd: ${{ parameters.IsProd }}
  ArtifactName: drop
  ArtifactPath: $(Pipeline.Workspace)/$(ArtifactName)

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: ValidatePR
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '14.x'

    - template: templates/print-environment-variables.yaml

    - task: Npm@1
      displayName: npm ci
      timeoutInMinutes: 3
      inputs:
        command: ci

    #- task: Npm@1
    #  displayName: npm run lint:ci
    #  timeoutInMinutes: 3
    #  inputs:
    #    command: custom
    #    customCommand: run lint:ci

    - task: Npm@1
      displayName: npm run test:once
      timeoutInMinutes: 3
      inputs:
        command: custom
        customCommand: run test:once

    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testRunTitle: npm run test:once
        testResultsFormat: JUnit
        testResultsFiles: '**/TESTS-*.xml'

    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage Results
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverage/cobertura-coverage.xml

    - task: Npm@1
      displayName: npm run e2e:ci
      inputs:
        command: custom
        customCommand: run e2e:ci

    - task: PublishTestResults@2
      displayName: Publish E2E Test Results
      condition: succeededOrFailed()
      inputs:
        searchFolder: $(System.DefaultWorkingDirectory)/e2e/test-results
        testRunTitle: npm run e2e
        testResultsFormat: JUnit
        testResultsFiles: "**/junit*.xml"

  - job: Prod
    steps:
    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '14.x'

    - template: templates/print-environment-variables.yaml

    - task: Npm@1
      displayName: npm ci
      timeoutInMinutes: 3
      inputs:
        command: ci

    - task: Npm@1
      displayName: npm run build:prod
      timeoutInMinutes: 6
      inputs:
        command: custom
        customCommand: run build:prod

    - task: CopyFiles@2
      timeoutInMinutes: 2
      inputs:
        sourceFolder: dist
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(ArtifactName)'
      timeoutInMinutes: 2
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: $(ArtifactName)

- stage: Deploy
  displayName: Deploy
  condition: and(succeeded(), or(eq(variables.IsMaster, true), eq(variables.IsProd, true)))
  variables:
  - group: kiosoft.ca-secrets
  jobs:
  - job: Prod
    displayName: Prod
    steps:
    - template: templates/print-environment-variables.yaml

    - task: DownloadPipelineArtifact@2
      timeoutInMinutes: 2
      inputs:
        artifactName: $(ArtifactName)
        targetPath: $(Build.SourcesDirectory)/$(ArtifactName)

    - task: FtpUpload@2
      displayName: 'FTP Upload: $(ArtifactName)'
      timeoutInMinutes: 5
      inputs:
        credentialsOption: inputs
        serverUrl: $(FtpServerUrl)
        username: $(SecretSanta_FtpUsername)
        password: $(SecretSanta_FtpPassword)
        rootDirectory: $(ArtifactName)
        remoteDirectory: /webapp/build/
        clean: true
        preservePaths: true
        trustSSL: true
